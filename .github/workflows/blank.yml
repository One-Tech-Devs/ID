# This is a basic workflow to help you get started with Actions

name: Provisao de Recursos AWS

# Controls when the workflow will run
on:
  workflow_dispatch:
  
env:
  # isto não é necessario apenas saiba que existe!
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'us-east-1'
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Create S3 Bucket
        run: |
          aws s3api create-bucket --bucket santosclaudinei-terraform-state --region us-east-1

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
    
      - name: Setup SSH Keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_ed25519.pub
          chmod 600 ~/.ssh/id_ed25519
          chmod 644 ~/.ssh/id_ed25519.pub
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="create_key=false"

      - name: Set INSTANCE_IP environment variable
        run: echo "instance_ip=`terraform output -raw instance_ip`" >> $GITHUB_ENV

      # Loop até a instancia estar totalmente pronta para executar
      - name: Wait for instance to be ready
        run: |
          while true; do
            status=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --region us-east-1 --query 'InstanceStatuses[0].[InstanceState.Name, SystemStatus.Status, InstanceStatus.Status]' --output text)
            arr=($status)
            if [ "${arr[0]}" == "running" ] && [ "${arr[1]}" == "ok" ] && [ "${arr[2]}" == "ok" ]; then
              break
            fi
            sleep 10
          done

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: pip install ansible

      - name: Create Ansible Inventory
        run: |
          echo "[santosclaudinei_vm]" > inventory.ini
          echo "${instance_ip}" >> inventory.ini
          echo "" >> inventory.ini
          cat inventory.ini

      - name: host key
        run: ssh-keyscan ${instance_ip} >> ~/.ssh/known_hosts

      - name: Run Ansible Playbook
        # env:
        #   SERVER: ${{ secrets.SERVER }}
        #   DATABASE: ${{ secrets.DATABASE }}
        #   PWD:  ${{ secrets.PWD }}
        #   MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}          
        #   MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}  
        run: ansible-playbook -i inventory.ini ansible-playbook.yml        

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
